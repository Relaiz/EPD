using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.Shapes;
using Avalonia.Layout;
using Avalonia.Media;
using TeacherScheduleApp.Models;

namespace TeacherScheduleApp.Controls
{
    public class CalendarEventControl : ContentControl
    {

        public int DayIndex { get; set; }
        public double StartHour { get; set; }
        public double EndHour { get; set; }
        public int OverlapIndex { get; set; }  
        public int OverlapCount { get; set; }

        public CalendarEventControl(Event ev)
        {
            HorizontalContentAlignment = HorizontalAlignment.Stretch;
            IBrush brush;
            if (ev.EventType == EventType.Lunch)
                brush = (ev.HasCollision
                        ? Brushes.Red
                        : Brushes.Orange);  
            else if (!ev.IsAutoGenerated && ev.HasCollision)
                    brush = Brushes.Red;
            else if (ev.EventType == EventType.Work)
                brush = Brushes.SteelBlue;
            else
                brush = Brushes.Gray;

            var border = new Border
            {
                Background = Brushes.White,
                BorderBrush = brush,
                BorderThickness = new Thickness(1),
                CornerRadius = new CornerRadius(4),
                Padding = new Thickness(4),
                Margin = new Thickness(2),
                HorizontalAlignment = HorizontalAlignment.Stretch
            };

            var grid = new Grid
            {
                ColumnDefinitions = new ColumnDefinitions("Auto,*"),
                RowDefinitions = new RowDefinitions("Auto")
            };

            var bullet = new Ellipse
            {
                Width = 8,
                Height = 8,
                Fill = brush,
                VerticalAlignment = VerticalAlignment.Center,
                Margin = new Thickness(0, 0, 6, 0)
            };
            Grid.SetColumn(bullet, 0);
            grid.Children.Add(bullet);

            var textPanel = new StackPanel
            {
                Orientation = Orientation.Vertical,
                Spacing = 2
            };
            Grid.SetColumn(textPanel, 1);

            var titleBlock = new TextBlock
            {
                Text = ev.Title,
                FontWeight = FontWeight.Bold,
                Foreground = Brushes.Black,
                TextWrapping = TextWrapping.Wrap,
                TextTrimming = TextTrimming.CharacterEllipsis,
                MaxLines = 2,
            };
            textPanel.Children.Add(titleBlock);

            if (!string.IsNullOrWhiteSpace(ev.Description))
            {
                var descBlock = new TextBlock
                {
                    Text = ev.Description,
                    Foreground = Brushes.Gray,
                    TextWrapping = TextWrapping.Wrap,
                    TextTrimming = TextTrimming.WordEllipsis,
                    MaxLines = 3,
                    FontSize = 12
                };
                textPanel.Children.Add(descBlock);

                ToolTip.SetTip(textPanel, $"{ev.Title}\n\n{ev.Description}");
            }
            else
            {
                ToolTip.SetTip(textPanel, ev.Title);
            }
            grid.Children.Add(textPanel);
            border.Child = grid;
            Content = border;          
        }
    }
}
