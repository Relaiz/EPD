using System;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;

namespace TeacherScheduleApp.Models
{
    public class Event
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public bool AllDay { get; set; }
        public string? Description { get; set; }
        public bool IsDeleted { get; set; }
        public double StartHour => StartTime.Hour + StartTime.Minute / 60.0;
        public double EndHour => EndTime.Hour + EndTime.Minute / 60.0;
        public EventType EventType { get; set; } = EventType.Work;
        public DateTime ArrivalTime { get; set; }
        public DateTime DepartureTime { get; set; }
        public DateTime LunchStart { get; set; }
        public DateTime LunchEnd { get; set; }
        public bool IsAutoGenerated { get; set; }
        public bool HasCollision { get; set; }
        public DateTime? AutoGeneratedForDate { get; set; }
        public double WorkedHours
        {
            get
            {
                if (EventType != EventType.Work)
                    return 8.0;

                double total = (DepartureTime - ArrivalTime).TotalHours;
                double lunch = (LunchEnd - LunchStart).TotalHours;
                double net = total - lunch;
                return net < 0 ? 0 : net;
            }
        }
    }
    public enum EventType
    {
        [Display(Name = "Práce")]
        Work,

        [Display(Name = "Oběd")]
        Lunch,

        [Display(Name = "Volno")]
        DayOff,

        [Display(Name = "Nemoc")]
        Illness,

        [Display(Name = "Dovolená")]
        Vacation,

        [Display(Name = "Ošetřování")]
        Ocr,

        [Display(Name = "Lékař")]
        Doctor,

        [Display(Name = "Pracovní cesta")]
        BusinessTrip,

        [Display(Name = "Svátek")]
        Holiday,
    }
    public static class EventTypeExtensions
    {
        /// <summary>
        /// Vrací atribut Display.Name pro hodnotu výčtu, 
        /// nebo jednoduše ToString(), pokud není atribut přítomen.
        /// </summary>
        public static string ToDisplayName(this EventType type)
        {
            var member = type.GetType()
                             .GetMember(type.ToString())
                             .FirstOrDefault();
            if (member != null)
            {
                var disp = member.GetCustomAttribute<DisplayAttribute>();
                if (disp?.Name != null)
                    return disp.Name;
            }
            return type.ToString();
        }
    }
}
