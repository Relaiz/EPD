using Microsoft.Extensions.Logging;
using ReactiveUI;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using TeacherScheduleApp.Helpers;
using TeacherScheduleApp.Messages;
using TeacherScheduleApp.Models;

namespace TeacherScheduleApp.Services
{
    public class EPDGenerator
    {
        private readonly EventService _eventService;
        private readonly Func<string, Task<bool>> _askCollision;

        public EPDGenerator(EventService eventService, Func<string, Task<bool>> askCollision)
        {
            _eventService = eventService;
            _askCollision = askCollision;
        }

       
        public async Task<List<Event>> GenerateEPDEventsAsync(string teacherScheduleCsvPath)
        {

            var manualEvents = new List<Event>();
            var years = new HashSet<int>();

            var lines = File.ReadAllLines(teacherScheduleCsvPath);
            if (lines.Length > 1)
            {
                for (int i = 1; i < lines.Length; i++)
                {
                    var parts = lines[i]
                        .Split(';')
                        .Select(p => p.Trim('\"'))
                        .ToArray();

                    if (parts.Length < 36)
                        continue;

                   
                    if (!DateTime.TryParse(parts[42], out var baseDate) &&
                        !DateTime.TryParse(parts[43], out baseDate))
                        continue;

                   
                    if (!DateTime.TryParse(parts[43], out var datumOd)) continue;
                    if (!DateTime.TryParse(parts[44], out var datumDo)) continue;

                    
                    if (!int.TryParse(parts[32], out var weekFrom)) continue;
                    if (!int.TryParse(parts[33], out var weekTo)) continue;

                  
                    var parity = parts[35].Length > 0
                        ? char.ToUpperInvariant(parts[35][0])
                        : 'K';

                    
                    if (!TimeSpan.TryParse(parts[30], out var spanStart)) continue;
                    if (!TimeSpan.TryParse(parts[31], out var spanEnd)) continue;

                  
                    var title = $"{parts[3]} {parts[20]}".Trim();
                    var description = $"{parts[15]} {parts[16]}".Trim();

                    
                    var targetDow = baseDate.DayOfWeek;

                   
                    for (var dt = datumOd.Date; dt <= datumDo.Date; dt = dt.AddDays(1))
                    {
                        if (dt.DayOfWeek != targetDow)
                            continue;

                        
                        int isoWeek = CultureInfo
                            .CurrentCulture
                            .Calendar
                            .GetWeekOfYear(dt,
                                           CalendarWeekRule.FirstFourDayWeek,
                                           DayOfWeek.Monday);

                        
                        if (isoWeek < weekFrom || isoWeek > weekTo)
                            continue;

                       
                        switch (parity)
                        {
                            case 'L': 
                                if (isoWeek % 2 == 0) continue;
                                break;
                            case 'S': 
                                if (isoWeek % 2 != 0) continue;
                                break;
                            case 'J': 
                                if (((isoWeek - weekFrom) % 2) == 0) continue;
                                break;
                            case 'K':
                            default:
                                break;
                        }

                        var ev = new Event
                        {
                            Title = title,
                            Description = description,
                            StartTime = dt + spanStart,
                            EndTime = dt + spanEnd,
                            EventType = EventType.Work,
                            AllDay = false,
                            IsAutoGenerated = false
                        };

                        _eventService.CreateEvent(ev);
                        manualEvents.Add(ev);
                        years.Add(ev.StartTime.Year);

                      
                    }
                }
            }
            var manualDates = manualEvents
        .Select(e => e.StartTime.Date)
        .Distinct()
        .ToList();

            
            int year = manualDates.FirstOrDefault().Year;
            var yearStart = new DateTime(year, 1, 1);
            var yearEnd = new DateTime(year, 12, 31);

            var autoGen = new AutomaticEventsGeneratorService(_eventService, _askCollision);

         
            foreach (var day in manualDates)
            {
                await autoGen.RegenerateDailyEventsAsync(day);
                AdjustUserSettingsForDay(day);
            }

       
            var allDays = Enumerable
                .Range(0, (yearEnd - yearStart).Days + 1)
                .Select(offset => yearStart.AddDays(offset));

            foreach (var day in allDays.Except(manualDates))
            {
                await autoGen.RegenerateDailyEventsAsync(day);
                AdjustUserSettingsForDay(day);
            }

            MessageBus.Current.SendMessage(new AutoEventsGeneratedMessage());
            MessageBus.Current.SendMessage(new EpdGeneratedMessage());

            return manualEvents;
        }

      
        private IEnumerable<TeacherLesson> LoadTeacherSchedule(string csvPath)
        {
            var lessons = new List<TeacherLesson>();
            var lines = File.ReadAllLines(csvPath);
            if (lines.Length < 2)
                return lessons;

     
            for (int i = 1; i < lines.Length; i++)
            {
                var line = lines[i];
                var parts = line.Split(';')
                             .Select(p => p.Trim('\"'))
                             .ToArray();

               
                if (parts.Length < 55)
                    continue;

         
                string dateStr = parts[42];
                if (string.IsNullOrWhiteSpace(dateStr))
                {
                    dateStr = parts[43]; 
                }
                if (!DateTime.TryParse(dateStr, out DateTime date))
                    continue;

               
                if (!TimeSpan.TryParse(parts[30], out TimeSpan startTimeSpan))
                    continue;
                if (!TimeSpan.TryParse(parts[31], out TimeSpan endTimeSpan))
                    continue;

               
                string title = $"{parts[3]} {parts[20]}".Trim();
               
                string description = $"{parts[15]} {parts[16]}".Trim();

              
                int rok = int.TryParse(parts[14], out int rokVal) ? rokVal : DateTime.Now.Year;

                DateTime startDateTime = date.Date.Add(startTimeSpan);
                DateTime endDateTime = date.Date.Add(endTimeSpan);

                lessons.Add(new TeacherLesson
                {
                    Date = date,
                    StartTime = startDateTime,
                    EndTime = endDateTime,
                    Title = title,
                    Description = description,
                    Rok = rok
                });
            }
            return lessons;
        }

   
        private void AdjustUserSettingsForDay(DateTime day)
        {
           
            var evs = _eventService
                .GetEventsForDay(day)
                .Where(e => !e.IsDeleted)
                .ToList();

           
            var workEvs = evs
                .Where(e => e.EventType is EventType.Work or EventType.BusinessTrip)
                .OrderBy(e => e.StartTime)
                .ToList();

            if (!workEvs.Any())
                return; 

            
            var arrival = workEvs.Min(e => e.StartTime.TimeOfDay);

        
            var departure = arrival + TimeSpan.FromHours(8);

           
            var lunchEvs = evs
                .Where(e => e.EventType == EventType.Lunch)
                .OrderBy(e => e.StartTime)
                .ToList();

            TimeSpan lunchStart, lunchEnd;
            if (lunchEvs.Any())
            {
                lunchStart = lunchEvs.First().StartTime.TimeOfDay;
                lunchEnd = lunchEvs.Last().EndTime.TimeOfDay;
            }
            else
            {
         
                var sem = GlobalSettingsService.GetSemesterForDate(day);
                var global = GlobalSettingsService.LoadGlobalSettings(sem)
                             ?? GlobalSettingsService.GetDefaultSettings(sem);
              
                lunchStart = TimeSpan.Parse(global.MondayLunchStart); 
                lunchEnd = TimeSpan.Parse(global.MondayLunchEnd);
            }

            SettingsService.SaveUserSettingsForDate(day, arrival, departure, lunchStart, lunchEnd);
        }
    }
}
