using MsBox.Avalonia.Enums;
using MsBox.Avalonia;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using TeacherScheduleApp.Models;
using TeacherScheduleApp.ViewModels;
using Avalonia.Controls.Documents;
using ReactiveUI;
using TeacherScheduleApp.Messages;
using static TeacherScheduleApp.Models.GlobalSettings;
using TeacherScheduleApp.Helpers;
using System.Globalization;

namespace TeacherScheduleApp.Services
{
  
    public class AutomaticEventsGeneratorService
    {
        private readonly EventService _eventService;
        private readonly Func<string, Task<bool>> _askCollision;

        public AutomaticEventsGeneratorService(EventService eventService, Func<string, Task<bool>> askCollision)
        {
            _eventService = eventService;
            _askCollision = askCollision;
        }

      
        public async Task RegenerateDailyEvents(DateTime date)
        {
            var day = date.Date;

            if (HolidayHelper.IsCzechHoliday(day) ||
               day.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday)
                return;
            if (IsInVacation(day, out var globalSet))
            {
                _eventService.RemoveAutoGeneratedEvents(day);

                
                var userSet = SettingsService.GetUserSettingsForDate(day);
                var (arr, dep, _, _) = GetDaySpans(globalSet, userSet, day.DayOfWeek);

                var vac = new Event
                {
                    Title = "Prázdniny",
                    StartTime = day + arr,
                    EndTime = day + dep,
                    EventType = EventType.Vacation,
                    IsAutoGenerated = true,
                    AutoGeneratedForDate = day
                };
                _eventService.CreateEvent(vac);
                return;
            }
            _eventService.RemoveAutoGeneratedEvents(day);

            var semester = GetSemesterForDate(day);
            var global = GlobalSettingsService.LoadGlobalSettings(semester) ?? GlobalSettingsService.GetDefaultSettings(semester); ;

            string arrStr, depStr, lunchStartStr, lunchEndStr;
            switch (day.DayOfWeek)
            {
                case DayOfWeek.Monday:
                    arrStr = global.MondayArrival;
                    depStr = global.MondayDeparture;
                    lunchStartStr = global.MondayLunchStart;
                    lunchEndStr = global.MondayLunchEnd;
                    break;
                case DayOfWeek.Tuesday:
                    arrStr = global.TuesdayArrival;
                    depStr = global.TuesdayDeparture;
                    lunchStartStr = global.TuesdayLunchStart;
                    lunchEndStr = global.TuesdayLunchEnd;
                    break;
                case DayOfWeek.Wednesday:
                    arrStr = global.WednesdayArrival;
                    depStr = global.WednesdayDeparture;
                    lunchStartStr = global.WednesdayLunchStart;
                    lunchEndStr = global.WednesdayLunchEnd;
                    break;
                case DayOfWeek.Thursday:
                    arrStr = global.ThursdayArrival;
                    depStr = global.ThursdayDeparture;
                    lunchStartStr = global.ThursdayLunchStart;
                    lunchEndStr = global.ThursdayLunchEnd;
                    break;
                case DayOfWeek.Friday:
                    arrStr = global.FridayArrival;
                    depStr = global.FridayDeparture;
                    lunchStartStr = global.FridayLunchStart;
                    lunchEndStr = global.FridayLunchEnd;
                    break;
                default:                 
                    return;
            }

         
            var arrival = TimeSpan.Parse(arrStr);
            var departure = TimeSpan.Parse(depStr);
            var lunchStart = TimeSpan.Parse(lunchStartStr);
            var lunchEnd = TimeSpan.Parse(lunchEndStr);


            var user = SettingsService.GetUserSettingsForDate(day);
            if (user != null)
            {
                arrival = user.ArrivalTime;
                departure = user.DepartureTime;
                lunchStart = user.LunchStart;
                lunchEnd = user.LunchEnd;
            }


            var evs = new List<Event>
            {
                new Event 
                {
                    Title               = global.AutoEventNamePreLunch,
                    StartTime           = day + arrival,
                    EndTime             = day + lunchStart,
                    EventType           = EventType.Work,
                    IsAutoGenerated     = true,
                    AutoGeneratedForDate= day
                },
                new Event 
                {
                    Title               = global.AutoEventNameLunch,
                    StartTime           = day + lunchStart,
                    EndTime             = day + lunchEnd,
                    EventType           = EventType.Lunch,
                    IsAutoGenerated     = true,
                    AutoGeneratedForDate= day
                },
                new Event 
                {
                    Title               = global.AutoEventNamePostLunch,
                    StartTime           = day + lunchEnd,
                    EndTime             = day + departure,
                    EventType           = EventType.Work,
                    IsAutoGenerated     = true,
                    AutoGeneratedForDate= day
                }
            };

    
            foreach (var ev in evs)
                _eventService.CreateEvent(ev);
        }

       
        public SemesterType GetSemesterForDate(DateTime date)
        {
            if ((date.Month >= 9) || (date.Month == 2 && date.Day <= 9))
            {
                return SemesterType.Winter;
            }

            if (date.Month >= 2 && date.Month <= 8)
            {
                return SemesterType.Summer;
            }

            return SemesterType.Winter;
        }
        public void RegenerateWorkEvents(DateTime date, TimeSpan arrival, TimeSpan departure)
        {
            var old = _eventService
                .GetEventsForDay(date)
                .Where(e => e.IsAutoGenerated && e.EventType == EventType.Work)
                .ToList();
            foreach (var ev in old)
                _eventService.DeleteEvent(ev.Id);

            var workEvent = new Event
            {
                Title = "Pracovní doba",
                StartTime = date.Add(arrival),
                EndTime = date.Add(departure),
                EventType = EventType.Work,
                IsAutoGenerated = true,
                AutoGeneratedForDate = date.Date
            };
            _eventService.CreateEvent(workEvent);
        }

        public void RegenerateLunchEvent(DateTime date, TimeSpan lunchStart, TimeSpan lunchEnd)
        {
            var old = _eventService
                .GetEventsForDay(date)
                .Where(e => e.IsAutoGenerated && e.EventType == EventType.Lunch)
                .ToList();
            foreach (var ev in old)
                _eventService.DeleteEvent(ev.Id);

            var lunchEvent = new Event
            {
                Title = "Oběd",
                StartTime = date.Add(lunchStart),
                EndTime = date.Add(lunchEnd),
                EventType = EventType.Lunch,
                IsAutoGenerated = true,
                AutoGeneratedForDate = date.Date
            };
            _eventService.CreateEvent(lunchEvent);
        }
       
        public async Task RegenerateAllAutoEventsForSemester(GlobalSettings.SemesterType sem)
        {
            var allDates = _eventService
                .GetAllEvents()
                .Where(e => e.IsAutoGenerated
                            && e.AutoGeneratedForDate.HasValue
                            && GetSemesterForDate(e.AutoGeneratedForDate.Value) == sem)
                .Select(e => e.AutoGeneratedForDate.Value.Date)
                .Distinct()
                .ToList();

            foreach (var date in allDates)
                RegenerateDailyEventsAsync(date);
        }
        public void UpdateAutoEventNames(DateTime date, string pre, string lunch, string post)
        {
            var dayEvents = _eventService
                .GetEventsForDay(date)
                .Where(e => e.IsAutoGenerated)
                .ToList();

            foreach (var ev in dayEvents)
            {
                switch (ev.EventType)
                {
                    case EventType.Work:
                        ev.Title = pre;  
                        break;
                    case EventType.Lunch:
                        ev.Title = lunch;
                        break;
                }
                _eventService.UpdateEvent(ev);
            }
        }
    
        public void RegenerateRangeEvents(DateTime start, DateTime end)
        {
            for (var day = start.Date; day <= end.Date; day = day.AddDays(1))
            {
                RegenerateDailyEvents(day);
            }
        }
        private void CreateAuto(DateTime start, DateTime end, EventType type, string title)
        {
            _eventService.CreateEvent(new Event
            {
                Title = title,
                StartTime = start,
                EndTime = end,
                EventType = type,
                IsAutoGenerated = true,
                AutoGeneratedForDate = start.Date
            });
        }

        public async Task RegenerateDailyEventsAsync(DateTime date)
        {
            var day = date.Date;
           

            if (HolidayHelper.IsCzechHoliday(day) ||
                day.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday)
            {
                return;
            }
            var beforeCount = _eventService.GetEventsForDay(day).Count(e => e.IsAutoGenerated);
        

            _eventService.RemoveAutoGeneratedEvents(day);

            var lessons = _eventService.GetEventsForDay(day)
                .Where(e => !e.IsAutoGenerated)
                .OrderBy(e => e.StartTime)
                .ToList();

            for (int i = 0; i < lessons.Count; i++)
            {
                for (int j = i + 1; j < lessons.Count; j++)
                {
                    var a = lessons[i];
                    var b = lessons[j];
                    if (Overlaps(a.StartTime.TimeOfDay, a.EndTime.TimeOfDay,
                                 b.StartTime.TimeOfDay, b.EndTime.TimeOfDay))
                    {

                        b.HasCollision = true;
                      

                        _eventService.UpdateEvent(b);
                    }
                }
            }

            var sem = GetSemesterForDate(day);
            var global = GlobalSettingsService.LoadGlobalSettings(sem) ?? GlobalSettingsService.GetDefaultSettings(sem);
            var user = SettingsService.GetUserSettingsForDate(day);
            var (arr, dep, lunchStart, lunchEnd) = GetDaySpans(global, user, day.DayOfWeek);
            string startStr = global.GlobalStartTime;
            string endStr = global.GlobalEndTime;   
            var format = @"hh\:mm";
            var start = TimeSpan.ParseExact(startStr, format, CultureInfo.InvariantCulture);
            var end = TimeSpan.ParseExact(endStr, format, CultureInfo.InvariantCulture);

            double dailyNorm = (end - start).TotalHours;
            var specials = lessons
            .Where(e => e.EventType is not EventType.Work and not EventType.Lunch)
            .ToList();

            var newEvents = new List<Event>();

            if (specials.Count == 1 &&
                (specials[0].EndTime - specials[0].StartTime).TotalHours >= dailyNorm)
            {
           
            }
            else
            {


                var merged = new List<(DateTime start, DateTime end)>();
                foreach (var l in lessons)
                {
                    var s = l.StartTime;
                    var e = l.EndTime;
                    if (merged.Count == 0 || merged.Last().end < l.StartTime)
                        merged.Add((l.StartTime, l.EndTime));
                    else
                        merged[^1] = (
                            merged.Last().start,
                            merged.Last().end > l.EndTime ? merged.Last().end : l.EndTime
                        );
                }
               

                if (!merged.Any())
                {
                   
                    CreateAuto(day + arr, day + lunchStart, EventType.Work, global.AutoEventNamePreLunch);
                    CreateAuto(day + lunchStart, day + lunchEnd, EventType.Lunch, global.AutoEventNameLunch);
                    CreateAuto(day + lunchEnd, day + dep, EventType.Work, global.AutoEventNamePostLunch);
                    return;
                }
                double manualWorked = merged.Sum(seg => (seg.end - seg.start).TotalHours);

                bool needAuto = manualWorked < dailyNorm;
                TimeSpan needSpan = TimeSpan.FromHours(Math.Max(0, dailyNorm - manualWorked));
                double toDo = dailyNorm - manualWorked;
                bool collision = lessons.Any(l =>
                        Overlaps(lunchStart, lunchEnd, l.StartTime.TimeOfDay, l.EndTime.TimeOfDay));
                var czPrompt =
                    $"Oběd {lunchStart:hh\\:mm}-{lunchEnd:hh\\:mm} " +
                    $"se překrývá s lekcí dne {day:dd.MM.yyyy}. " +
                    "Chcete ho přesunout?";
                if (collision)
                {
                    bool move = await _askCollision(czPrompt);
                    if (move)
                    {

                        var lastConflictEnd = merged
                        .Where(seg => Overlaps(lunchStart, lunchEnd,
                                       seg.start.TimeOfDay, seg.end.TimeOfDay))
                        .Max(seg => seg.end.TimeOfDay);
                        var lunchDur = lunchEnd - lunchStart;
                        lunchStart = lastConflictEnd;
                        lunchEnd = lastConflictEnd + lunchDur;
                    }
                }

                newEvents = new List<Event>();
                newEvents.Add(new Event
                {
                    Title = global.AutoEventNameLunch,
                    StartTime = day + lunchStart,
                    EndTime = day + lunchEnd,
                    EventType = EventType.Lunch,
                    IsAutoGenerated = true,
                    AutoGeneratedForDate = day,
                    HasCollision = collision
                });
                foreach (var gap in SplitByMergedLessons(day + arr, day + lunchStart, merged))
                {
                    if (needSpan <= TimeSpan.Zero) break;
                    var take = (gap.end - gap.start) >= needSpan ? needSpan : (gap.end - gap.start);
                    newEvents.Add(new Event
                    {
                        Title = global.AutoEventNamePreLunch,
                        StartTime = gap.start,
                        EndTime = gap.start + take,
                        EventType = EventType.Work,
                        IsAutoGenerated = true,
                        AutoGeneratedForDate = day
                    });
                    needSpan -= take;
                }

                if (needSpan > TimeSpan.Zero)
                {
                    foreach (var gap in SplitByMergedLessons(day + lunchEnd, day + dep, merged))
                    {
                        if (needSpan <= TimeSpan.Zero) break;
                        var take = (gap.end - gap.start) >= needSpan ? needSpan : (gap.end - gap.start);
                        newEvents.Add(new Event
                        {
                            Title = global.AutoEventNamePostLunch,
                            StartTime = gap.start,
                            EndTime = gap.start + take,
                            EventType = EventType.Work,
                            IsAutoGenerated = true,
                            AutoGeneratedForDate = day
                        });
                        needSpan -= take;
                    }
                }
            }
        
            foreach (var ev in newEvents)
            {
                _eventService.CreateEvent(ev);
            }

            var first = newEvents.Min(e => e.StartTime.TimeOfDay);
            SettingsService.SaveUserSettingsForDate(
                day,
                first,
                first + TimeSpan.FromHours(dailyNorm),
                lunchStart,
                lunchEnd
            );

        }
        private IEnumerable<(DateTime start, DateTime end)> SplitByMergedLessons(DateTime from,DateTime to,List<(DateTime start, DateTime end)> mergedLessons)
        {
            var cursor = from;
            foreach (var seg in mergedLessons)
            {
                if (seg.end <= cursor) continue;
                if (seg.start >= to) break;
                if (seg.start > cursor)
                    yield return (cursor, Min(seg.start, to));
                cursor = Max(cursor, seg.end);
                if (cursor >= to) yield break;
            }
            if (cursor < to)
                yield return (cursor, to);
        }
        private static bool Overlaps(TimeSpan a0, TimeSpan a1, TimeSpan b0, TimeSpan b1)
            => a0 < b1 && b0 < a1;

        private (TimeSpan arr, TimeSpan dep, TimeSpan lunchStart, TimeSpan lunchEnd)
        GetDaySpans(GlobalSettings g, UserSettings u, DayOfWeek wd)
        {
            string sa, sd, s0, s1;
            switch (wd)
            {
                case DayOfWeek.Monday:
                    (sa, sd, s0, s1) =
                      (g.MondayArrival, g.MondayDeparture,
                       g.MondayLunchStart, g.MondayLunchEnd);
                    break;
                case DayOfWeek.Tuesday:
                    (sa, sd, s0, s1) =
                      (g.TuesdayArrival, g.TuesdayDeparture,
                       g.TuesdayLunchStart, g.TuesdayLunchEnd);
                    break;
                case DayOfWeek.Wednesday:
                    (sa, sd, s0, s1) =
                      (g.WednesdayArrival, g.WednesdayDeparture,
                       g.WednesdayLunchStart, g.WednesdayLunchEnd);
                    break;
                case DayOfWeek.Thursday:
                    (sa, sd, s0, s1) =
                      (g.ThursdayArrival, g.ThursdayDeparture,
                       g.ThursdayLunchStart, g.ThursdayLunchEnd);
                    break;
                case DayOfWeek.Friday:
                    (sa, sd, s0, s1) =
                      (g.FridayArrival, g.FridayDeparture,
                       g.FridayLunchStart, g.FridayLunchEnd);
                    break;
                default:
                    throw new InvalidOperationException("Není pracovný den");
            }

            if (u != null)
            {
                sa = u.ArrivalTime.ToString(@"hh\:mm");
                sd = u.DepartureTime.ToString(@"hh\:mm");
                s0 = u.LunchStart.ToString(@"hh\:mm");
                s1 = u.LunchEnd.ToString(@"hh\:mm");
            }
            if (string.IsNullOrWhiteSpace(sa) || string.IsNullOrWhiteSpace(sd))
            {
                sa = g.GlobalStartTime;
                sd = g.GlobalEndTime;
            }

            var arr = TimeSpan.Parse(sa, CultureInfo.InvariantCulture);
            var dep = TimeSpan.Parse(sd, CultureInfo.InvariantCulture);

           
            TimeSpan lunchStart, lunchEnd;
            if (string.IsNullOrWhiteSpace(s0) || string.IsNullOrWhiteSpace(s1))
            {
                var halfSpan = (dep - arr) / 2;
                lunchStart = arr + halfSpan - TimeSpan.FromMinutes(15);
                lunchEnd = lunchStart + TimeSpan.FromMinutes(30);
            }
            else
            {
                lunchStart = TimeSpan.Parse(s0, CultureInfo.InvariantCulture);
                lunchEnd = TimeSpan.Parse(s1, CultureInfo.InvariantCulture);
            }


            return (arr, dep, lunchStart, lunchEnd);
        }
        static DateTime Min(DateTime a, DateTime b) => a < b ? a : b;
        static DateTime Max(DateTime a, DateTime b) => a > b ? a : b;
    
        public async Task RegenerateRangeEventsAsync(DateTime start, DateTime end)
        {
            for (var d = start.Date; d <= end.Date; d = d.AddDays(1))
                await RegenerateDailyEventsAsync(d);

            MessageBus.Current.SendMessage(new AutoEventsGeneratedMessage());
        }

       
        private List<Event> BuildDesiredEvents(DateTime day)
        {
          
            var sem = GetSemesterForDate(day);
            var global = GlobalSettingsService.LoadGlobalSettings(sem)
                         ?? GlobalSettingsService.GetDefaultSettings(sem);
            var user = SettingsService.GetUserSettingsForDate(day);

       
            var (arr, dep, l0, l1) = GetDaySpans(global, user, day.DayOfWeek);

            return new List<Event>
        {
            new Event
            {
                Title = global.AutoEventNamePreLunch,
                StartTime = day + arr,
                EndTime   = day + l0,
                EventType = EventType.Work,
                IsAutoGenerated = true,
                AutoGeneratedForDate = day
            },
            new Event
            {
                Title = global.AutoEventNameLunch,
                StartTime = day + l0,
                EndTime   = day + l1,
                EventType = EventType.Lunch,
                IsAutoGenerated = true,
                AutoGeneratedForDate = day
            },
            new Event
            {
                Title = global.AutoEventNamePostLunch,
                StartTime = day + l1,
                EndTime   = day + dep,
                EventType = EventType.Work,
                IsAutoGenerated = true,
                AutoGeneratedForDate = day
            }
        };
        }

   
        private bool AreEqual(List<Event> existing, List<Event> desired)
        {
            if (existing.Count != desired.Count) return false;
            var set = new HashSet<string>(
                desired.Select(e => $"{e.EventType}|{e.Title}|{e.StartTime:O}|{e.EndTime:O}")
            );
            return existing.All(e =>
                set.Contains($"{e.EventType}|{e.Title}|{e.StartTime:O}|{e.EndTime:O}")
            );
        }

      
        private IEnumerable<(DateTime start, DateTime end)> SplitByLessons(
            DateTime from, DateTime to, List<Event> lessons)
        {
            var cursor = from;
            foreach (var les in lessons)
            {
                if (les.EndTime <= cursor) continue;
                if (les.StartTime >= to) break;

              
                if (les.StartTime > cursor)
                {
                    yield return (cursor, Min(les.StartTime, to));
                }
                cursor = Max(cursor, les.EndTime);
                if (cursor >= to)
                    yield break;
            }
            if (cursor < to)
                yield return (cursor, to);
        }
        private bool IsInVacation(DateTime day, out GlobalSettings global)
        {
            var sem = GetSemesterForDate(day);
            global = GlobalSettingsService
                        .LoadGlobalSettings(sem)
                     ?? GlobalSettingsService.GetDefaultSettings(sem);

            int md = day.Month * 100 + day.Day;

            int winterStart = 12 * 100 + 23;
            int winterEnd = 1 * 100 + 1;
            bool inWinter = (md >= winterStart) || (md <= winterEnd);

            int summerStart = 6 * 100 + 30;
            int summerEnd = 8 * 100 + 10;
            bool inSummer = md >= summerStart && md <= summerEnd;

            return inWinter || inSummer;
        }
    }
}
